SET SERVEROUTPUT ON;

EXEC DROP_ALL_TABLES;
EXEC CREATE_ALL_TABLES;
EXEC INSERT_ALL_TABLES;

-- Check
EXEC DELETE_CART_ORDERS;

EXEC INSERT_USERS_AND_ROLES;

GRANT CONNECT TO CUSTOMER_1;
GRANT CONNECT TO CUSTOMER_2;
GRANT CONNECT TO SUPPLIER_1;

GRANT CREATE SESSION  TO  CUSTOMER_1;
GRANT CREATE SESSION  TO  CUSTOMER_2;
GRANT CREATE SESSION  TO  SUPPLIER_1;

GRANT EXECUTE ON MANAGE_CART_AND_ORDERS TO CUSTOMER_1;
GRANT EXECUTE ON MANAGE_CART_AND_ORDERS TO CUSTOMER_2;
GRANT EXECUTE ON MANAGE_PRODUCT_SUPPLIER TO SUPPLIER_1;

COMMIT;

/
------------------------------------------------------------------------
create or replace PACKAGE MANAGE_CART_AND_ORDERS AS

PROCEDURE CREATE_CART(USER_ID INT);

PROCEDURE ADD_CART_ITEM(
USER_ID INT
,PRODUCT_NAME VARCHAR
,QTY INT
);



/*PROCEDURE ADD_TO_CART(
CI_CART_ID INT
,CI_USER_ID INT
);
*/

PROCEDURE CREATE_ORDER( USER_ID INT, ADDRESS_ID INT);

/*PROCEDURE ADD_ORDER(
OI_ORDER_ID INT
,OI_ORDER_STATUS VARCHAR
,OI_USER_ID INT
,OI_ORDER_DATE date
,OI_ADDRESS_ID INT
);
*/
PROCEDURE ADD_ORDER_ITEMS(USER_ID INT);
--OI_ORDER_ITEM_ID INT
---,OI_ORDER_ID INT
--,OI_PRODUCT_ID INT
--,OI_QTY INT
--*/

PROCEDURE DELETE_CART_ITEM(USER_ID INT);

END;


/
create or replace PACKAGE BODY MANAGE_CART_AND_ORDERS AS

-------------------------------------------------------------------------------
--CREATE CART IN CART_TABLE
-------------------------------------------------------------------------------
PROCEDURE CREATE_CART(USER_ID INT) IS
M_USER_ID INT;
NEXT_COUNT INT;
V_COUNT INT;
BEGIN
    M_USER_ID:=USER_ID;
    SELECT COUNT(*) INTO V_COUNT  FROM CART WHERE CART.USER_ID = M_USER_ID;
    DBMS_OUTPUT.PUT_LINE('V_COUNT: '|| V_COUNT);
    IF(V_COUNT = 0) THEN
        SELECT COUNT(*)+1 INTO NEXT_COUNT FROM CART;
        EXECUTE IMMEDIATE('INSERT INTO CART VALUES('||NEXT_COUNT||', '||USER_ID||', 0)');
        DBMS_OUTPUT.PUT_LINE('CREATED CART FOR USER');
    ELSE
        DBMS_OUTPUT.PUT_LINE('CART EXISTS FOR USER');
    END IF;
END;


-------------------------------------------------------------------------------
--ADD A PRODUCT TO CART_ITEM TABLE
-------------------------------------------------------------------------------
PROCEDURE ADD_CART_ITEM(USER_ID INT,PRODUCT_NAME VARCHAR,QTY INT) IS
M_USER_ID INT;
M_PRODUCT_NAME VARCHAR(255);
M_QTY INT;
M_AVAILABLE_QTY INT;
M_CART_ITEM_ID INT;
M_CART_ID INT;
BEGIN
    M_USER_ID:=USER_ID;
    M_PRODUCT_NAME:=PRODUCT_NAME;
    M_QTY:=QTY;
    -- !!AS USER_ID IS SAME AS CART_ID!! (DISCUSSED)
    M_CART_ID:=USER_ID;
    SELECT QUANTITY INTO M_AVAILABLE_QTY FROM PRODUCT WHERE PRODUCT_NAME=M_PRODUCT_NAME;
    IF(M_QTY > M_AVAILABLE_QTY) THEN
        DBMS_OUTPUT.PUT_LINE('SELECTED QTY MORE THAN AVAILABLE QTY, AVAILABLE QTY: ' || M_AVAILABLE_QTY);
    ELSE
        SELECT COUNT(*)+1 INTO M_CART_ITEM_ID FROM CART_ITEM;
        SELECT PRODUCT_ID INTO M_PRODUCT_NAME FROM PRODUCT WHERE PRODUCT_NAME = M_PRODUCT_NAME;
        INSERT INTO CART_ITEM VALUES(M_CART_ITEM_ID, M_CART_ID, M_PRODUCT_NAME, M_QTY);
    END IF;
END;


-------------------------------------------------------------------------------
--CREATE A ORDER AND ADD A ROW IN ORDERS TABLE
-------------------------------------------------------------------------------
PROCEDURE CREATE_ORDER(USER_ID INT, ADDRESS_ID INT) IS
M_ORDER_ID INT;
M_USER_ID INT;
M_ADDRESS_ID INT;
M_ORDER_STATUS VARCHAR(255);
M_ORDER_DATE DATE;
BEGIN
    M_USER_ID:=USER_ID;
    M_ADDRESS_ID:=ADDRESS_ID;
    M_ORDER_STATUS:='ORDERED';
    SELECT COUNT(*)+1 INTO M_ORDER_ID FROM ORDERS;
    SELECT CURRENT_DATE INTO M_ORDER_DATE FROM DUAL;
    DBMS_OUTPUT.PUT_LINE('NEW ORDER CREATED');
    INSERT INTO ORDERS VALUES(M_ORDER_ID, M_ORDER_STATUS, M_USER_ID, M_ORDER_DATE, M_ADDRESS_ID);
    MANAGE_CART_AND_ORDERS.ADD_ORDER_ITEMS(M_USER_ID);
END;


-------------------------------------------------------------------------------
--TRANSFER CART_ITEMS DETAILS INTO ORDER_ITEMS, UPDATES PRODUCT QUANTITY
-------------------------------------------------------------------------------
PROCEDURE ADD_ORDER_ITEMS(USER_ID INT) IS
M_USER_ID INT;
M_ORDER_ID INT;
M_ORDER_ITEM_ID INT;
M_PRODUCT_ID INT;
M_PRODUCT_QTY INT;
M_PRODUCT_AVAILABLE_QTY INT;
M_LOOP_COUNT INT;

--
C_QTY_CHECK INT;
QUANTITY_CHECK_IN_PRODUCTS EXCEPTION;
--
BEGIN
    M_USER_ID:=USER_ID;
    SELECT COUNT(*) INTO M_LOOP_COUNT FROM CART_ITEM WHERE CART_ID = M_USER_ID;
    SELECT COUNT(*) INTO M_ORDER_ID FROM ORDERS;
    
    FOR I IN 0..M_LOOP_COUNT-1 
        LOOP
            SELECT COUNT(*)+1 INTO M_ORDER_ITEM_ID FROM ORDER_ITEM;
            
            
            select product_id into m_product_id from (SELECT PRODUCT_ID FROM cart_item WHERE cart_id=m_user_id) where rownum=1;
            
            SELECT QUANTITY INTO C_QTY_CHECK FROM PRODUCT WHERE PRODUCT_ID IN (SELECT PRODUCT_ID  FROM CART_ITEM WHERE CART_ID = M_USER_ID AND ROWNUM=1);
            select quantity into m_product_qty from (SELECT quantity FROM cart_item WHERE cart_id=m_user_id) where rownum=1;
            
            IF (M_PRODUCT_QTY>C_QTY_CHECK ) THEN
                DELETE FROM ORDERS WHERE USER_ID = M_USER_ID;
                RAISE QUANTITY_CHECK_IN_PRODUCTS;
            END IF;
            
            dbms_output.put_line(M_ORDER_ITEM_ID || M_ORDER_ID || M_PRODUCT_ID || M_PRODUCT_QTY);
        
            INSERT INTO ORDER_ITEM VALUES(M_ORDER_ITEM_ID, M_ORDER_ID, M_PRODUCT_ID, M_PRODUCT_QTY);
        
            DELETE FROM CART_ITEM WHERE CART_ID = M_USER_ID AND PRODUCT_ID = M_PRODUCT_ID;
            
            SELECT QUANTITY INTO M_PRODUCT_AVAILABLE_QTY FROM PRODUCT WHERE PRODUCT_ID = M_PRODUCT_ID;
            UPDATE PRODUCT SET QUANTITY=M_PRODUCT_AVAILABLE_QTY-M_PRODUCT_QTY WHERE PRODUCT_ID = M_PRODUCT_ID;
            
        END LOOP; 
        
        EXCEPTION WHEN QUANTITY_CHECK_IN_PRODUCTS THEN
        DBMS_OUTPUT.PUT_LINE('ORDER QUANTITY GREATER THAN AVAILABLE QUANTITY OF PRODUCT');
END;


-------------------------------------------------------------------------------
--TRUNCATE USER DATA FROM CART_ITEM TABLE
-------------------------------------------------------------------------------
PROCEDURE DELETE_CART_ITEM(USER_ID INT) IS
M_USER_ID INT;
BEGIN
    M_USER_ID:=USER_ID;
    -- !!AS USER_ID IS SAME AS CART_ID!! (DISCUSSED)
    DELETE FROM CART_ITEM WHERE CART_ID = M_USER_ID;
END;


-------------------------------------------------------------------------------
END;

-------------------------------------------------------------------------------------------
/
create or replace PACKAGE MANAGE_PRODUCT_SUPPLIER AS

PROCEDURE ADD_NEW_PRODUCT(PRODUCT_NAME VARCHAR, CATEGORY_ID INT, PRICE INT, QTY INT, DISCOUNT_ID FLOAT);
PROCEDURE UPDATE_PRODUCT_NAME(PRODUCT_NAME VARCHAR, NEW_PRODUCT_NAME VARCHAR);
PROCEDURE UPDATE_PRODUCT_QTY(PRODUCT_NAME VARCHAR, NEW_PRODUCT_QTY INT);
PROCEDURE UPDATE_PRODUCT_PRICE(PRODUCT_NAME VARCHAR, NEW_PRODUCT_PRICE INT);

END;

/
create or replace PACKAGE BODY MANAGE_PRODUCT_SUPPLIER AS

PROCEDURE ADD_NEW_PRODUCT(PRODUCT_NAME VARCHAR, CATEGORY_ID INT, PRICE INT, QTY INT, DISCOUNT_ID FLOAT) IS
M_PRODUCT_NAME VARCHAR(255);
M_CATEGORY_ID INT;
M_PRICE INT;
M_QTY INT;
M_PRODUCT_ID INT;
M_DISCOUNT_ID INT;
BEGIN
    M_PRODUCT_NAME:=PRODUCT_NAME;
    M_CATEGORY_ID:=CATEGORY_ID;
    M_PRICE:=PRICE;
    M_QTY:=QTY;
    M_DISCOUNT_ID:=DISCOUNT_ID;
    
    SELECT COUNT(*)+1 INTO M_PRODUCT_ID FROM PRODUCT;
    INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY) VALUES (M_PRODUCT_ID,M_PRODUCT_NAME,M_CATEGORY_ID,M_PRICE,M_QTY);
    
END;

PROCEDURE UPDATE_PRODUCT_NAME(PRODUCT_NAME VARCHAR, NEW_PRODUCT_NAME VARCHAR) IS
M_PRODUCT_NAME VARCHAR(255);
M_NEW_PRODUCT_NAME VARCHAR(255);
BEGIN
    M_PRODUCT_NAME:=PRODUCT_NAME;
    M_NEW_PRODUCT_NAME:= NEW_PRODUCT_NAME;
    UPDATE PRODUCT SET PRODUCT_NAME=M_NEW_PRODUCT_NAME WHERE PRODUCT_NAME=M_PRODUCT_NAME;
END;

PROCEDURE UPDATE_PRODUCT_QTY(PRODUCT_NAME VARCHAR, NEW_PRODUCT_QTY INT) IS
M_PRODUCT_NAME VARCHAR(255);
M_NEW_PRODUCT_QTY INT;
BEGIN
    M_PRODUCT_NAME:=PRODUCT_NAME;
    M_NEW_PRODUCT_QTY:=NEW_PRODUCT_QTY;
    UPDATE PRODUCT SET QUANTITY=M_NEW_PRODUCT_QTY WHERE PRODUCT_NAME=M_PRODUCT_NAME;
END;

PROCEDURE UPDATE_PRODUCT_PRICE(PRODUCT_NAME VARCHAR, NEW_PRODUCT_PRICE INT) IS
M_PRODUCT_NAME VARCHAR(255);
M_NEW_PRODUCT_PRICE INT;
BEGIN
    M_PRODUCT_NAME:=PRODUCT_NAME;
    M_NEW_PRODUCT_PRICE:=NEW_PRODUCT_PRICE;
    UPDATE PRODUCT SET PRICE=M_NEW_PRODUCT_PRICE WHERE PRODUCT_NAME=M_PRODUCT_NAME;
END;

END;

--------------------------------------------------------------------------------------------
/
create or replace PACKAGE MANAGE_USERS_AND_ACCESS AS
    PROCEDURE CREATE_USER (
        USERNAME VARCHAR,
        PASSWORD VARCHAR
    );

    PROCEDURE CREATE_ROLE (
        ROLENAME VARCHAR
    );

    PROCEDURE MANAGE_ROLE_ACCESS (
        TABLENAME   VARCHAR,
        ROLENAME    VARCHAR,
        ACCESSTYPES VARCHAR
    );

    PROCEDURE GRANT_ROLE_TO_USER (
        ROLENAME VARCHAR,
        USERNAME VARCHAR
    );

    FUNCTION F_IS_USER_ALREADY_CREATED (
        USERNAME VARCHAR
    ) RETURN NUMBER;

END;


/
create or replace PACKAGE BODY MANAGE_USERS_AND_ACCESS AS

-------------------------------------------------------------------------------
--CREATE USER
-------------------------------------------------------------------------------
    PROCEDURE CREATE_USER (USERNAME VARCHAR,PASSWORD VARCHAR) IS
    
    SQLS VARCHAR2(255);
    USER_EXISTS EXCEPTION;
    PRAGMA EXCEPTION_INIT ( USER_EXISTS, -2002 );
    IS_USER_AVAILABLE NUMBER;

    BEGIN
        SQLS := 'CREATE USER '|| USERNAME|| ' IDENTIFIED BY "'|| PASSWORD|| '" ';
        EXECUTE IMMEDIATE SQLS;
        DBMS_OUTPUT.PUT_LINE('  OK: ' || SQLS);
    EXCEPTION
        WHEN USER_EXISTS THEN
            DBMS_OUTPUT.PUT_LINE('WARN: ' || SQLS);
            DBMS_OUTPUT.PUT_LINE('ALREADY EXISTS');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('FAIL: ' || SQLS);
    END;


-------------------------------------------------------------------------------
--CREATE ROLE
-------------------------------------------------------------------------------
    PROCEDURE CREATE_ROLE (ROLENAME VARCHAR) IS

    SQLS VARCHAR2(255);
    ROLE_EXISTS EXCEPTION;
    PRAGMA EXCEPTION_INIT ( ROLE_EXISTS, -2002 );

    BEGIN
        SQLS := 'CREATE ROLE ' || ROLENAME;
        EXECUTE IMMEDIATE SQLS;
        DBMS_OUTPUT.PUT_LINE('  OK: ' || SQLS);
    EXCEPTION
        WHEN ROLE_EXISTS THEN
            DBMS_OUTPUT.PUT_LINE('WARN: ' || SQLS);
            DBMS_OUTPUT.PUT_LINE('ALREADY EXISTS');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('FAIL: ' || SQLS);
    END;


-------------------------------------------------------------------------------
--MANAGE ROLE
-------------------------------------------------------------------------------
    PROCEDURE MANAGE_ROLE_ACCESS (TABLENAME   VARCHAR,ROLENAME    VARCHAR,ACCESSTYPES VARCHAR ) IS

    IS_ROLE_AVAILABLE NUMBER;
    E_ROLE_ALREADY_CREATED EXCEPTION;

    BEGIN
        SELECT
            COUNT(*)
        INTO IS_ROLE_AVAILABLE
        FROM
            DBA_ROLES
        WHERE
            LOWER(ROLE) = LOWER(ROLENAME);
        IF ( IS_ROLE_AVAILABLE = 1 ) THEN
            EXECUTE IMMEDIATE 'GRANT '|| ACCESSTYPES|| ' ON '|| TABLENAME|| ' TO '|| ROLENAME;
        ELSE
            RAISE E_ROLE_ALREADY_CREATED;
        END IF;
    EXCEPTION
        WHEN E_ROLE_ALREADY_CREATED THEN
            DBMS_OUTPUT.PUT_LINE('ROLE NOT CREATED!!');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END;


-------------------------------------------------------------------------------
--GRANT ROLE TO USER
-------------------------------------------------------------------------------
    PROCEDURE GRANT_ROLE_TO_USER (ROLENAME VARCHAR,USERNAME VARCHAR) IS

    IS_ROLE_AVAILABLE NUMBER;
    SQLS              VARCHAR2(255);
    ROLE_EXISTS EXCEPTION;
    PRAGMA EXCEPTION_INIT ( ROLE_EXISTS, -2002 );

    BEGIN
        SQLS := 'GRANT '|| ROLENAME|| ' TO '|| USERNAME;
        EXECUTE IMMEDIATE SQLS;
        DBMS_OUTPUT.PUT_LINE('  OK: ' || SQLS);
    EXCEPTION
        WHEN ROLE_EXISTS THEN
            DBMS_OUTPUT.PUT_LINE('WARN: ' || SQLS);
            DBMS_OUTPUT.PUT_LINE('ALREADY EXISTS');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('FAIL: ' || SQLS);
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END;


-------------------------------------------------------------------------------
--FUNCTION TO CHECK IF USER
-------------------------------------------------------------------------------
    FUNCTION F_IS_USER_ALREADY_CREATED (USERNAME VARCHAR) RETURN NUMBER IS 

    IS_AVAILABLE NUMBER;

    BEGIN
        SELECT
            COUNT(*)
        INTO IS_AVAILABLE
        FROM
            DBA_USERS
        WHERE
            USERNAME = UPPER(USERNAME);
        DBMS_OUTPUT.PUT_LINE('USERNAME!!' || USERNAME);
        DBMS_OUTPUT.PUT_LINE('IS_AVAILABLE!!' || IS_AVAILABLE);
        IF IS_AVAILABLE > 0 THEN
            IS_AVAILABLE := 1; --ALREADY CREATED
        END IF;
        RETURN IS_AVAILABLE;
    END F_IS_USER_ALREADY_CREATED;

END;

---------------------------------------------------------------------------------------------
/
create or replace PROCEDURE CREATE_ALL_TABLES IS

V_COUNT NUMBER;

BEGIN

-------------------------------------------------------------------------------
--DDL FOR USER_TABLE
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='USER_TABLE';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE USER_TABLE (
                    USER_ID INT PRIMARY KEY
                    ,FIRST_NAME VARCHAR (200)
                    ,LAST_NAME VARCHAR(200)
                    ,PHONE_NUMBER INT
                    ,LOYALTY_DISC FLOAT 
                    )';
DBMS_OUTPUT.PUT_LINE('TABLE USER_TABLE CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;

-------------------------------------------------------------------------------
--DDL FOR ADDRESS
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='ADDRESS';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE ADDRESS(
                    ADDRESS_ID INT PRIMARY KEY,
                    USER_ID INT ,
                    CONSTRAINT ADDRESS_TABLE_FK1 FOREIGN KEY (USER_ID) REFERENCES USER_TABLE(USER_ID)
                    ,ADDRESS VARCHAR(255)
                    ,STREET VARCHAR(255)
                    ,CITY VARCHAR(255)
                    ,STATE VARCHAR(255)
                    ,PIN INT
                    ,COUNTRY VARCHAR(255)
                    )';
DBMS_OUTPUT.PUT_LINE('TABLE ADDRESS CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;

-------------------------------------------------------------------------------
--DDL FOR CART
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='CART';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE CART (
                    CART_ID INT PRIMARY KEY
                    ,USER_ID INT ,
                    CONSTRAINT ADDRESS_FK1 FOREIGN KEY (USER_ID) REFERENCES USER_TABLE(USER_ID)
                    ,LOYALTY_DISC FLOAT
                    )';
DBMS_OUTPUT.PUT_LINE('TABLE CART CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;


-------------------------------------------------------------------------------
--DDL FOR ORDERS
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='ORDERS';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE ORDERS(
                    ORDER_ID INT PRIMARY KEY
                    ,ORDER_STATUS VARCHAR(255)
                    ,USER_ID INT,CONSTRAINT ORDERS_FK1 FOREIGN KEY (USER_ID) REFERENCES USER_TABLE(USER_ID)
                    ,ORDER_DATE DATE
                    ,ADDRESS_ID INT
                    )';
DBMS_OUTPUT.PUT_LINE('TABLE ORDERS CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;


-------------------------------------------------------------------------------
--DDL FOR LOYALTY_DISCOUNT
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='LOYALTY_DISCOUNT';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE LOYALTY_DISCOUNT(
                    DISCOUNT_ID INT PRIMARY KEY
                    ,USER_ID INT, CONSTRAINT LOYALTY_DISCOUNT_FK1 FOREIGN KEY (USER_ID) REFERENCES USER_TABLE(USER_ID)
                    ,DISCOUNT_PCT INT
                    )';
DBMS_OUTPUT.PUT_LINE('TABLE LOYALTY_DISCOUNT CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;





-------------------------------------------------------------------------------
--DDL FOR PAYMENT_INFO
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='PAYMENT_INFO';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE PAYMENT_INFO(
                    PAYMENT_ID INT PRIMARY KEY
                    ,ORDER_ID INT, CONSTRAINT PAYMENT_INFO_FK1 FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID)
                    ,PAYMENT_TYPE VARCHAR(40) NOT NULL
                    )'; 
DBMS_OUTPUT.PUT_LINE('TABLE PAYMENT_INFO CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;

-------------------------------------------------------------------------------
--DDL FOR SUPPLIER
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='SUPPLIER';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE SUPPLIER(
                    SUPPLIER_ID INT PRIMARY KEY
                    ,SUPPLIER_NAME VARCHAR(200)
                    )';
DBMS_OUTPUT.PUT_LINE('TABLE SUPPLIER CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;

-------------------------------------------------------------------------------
--DDL FOR DISCOUNT
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='DISCOUNT';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE DISCOUNT(
                    DISCOUNT_TYPE VARCHAR(220)
                    ,DISCOUNT_ID INT PRIMARY KEY
                    ,DISCOUNT_PCT FLOAT
                    )'; 
DBMS_OUTPUT.PUT_LINE('TABLE DISCOUNT CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;


-------------------------------------------------------------------------------
--DDL FOR CATEGORY
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='CATEGORY';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE CATEGORY(
                    CATEGORY_ID INT PRIMARY KEY
                    ,CATEGORY_NAME VARCHAR(200)
                    )';
DBMS_OUTPUT.PUT_LINE('TABLE CATEGORY CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;

-------------------------------------------------------------------------------
--DDL FOR PRODUCT
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='PRODUCT';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE PRODUCT(
                    PRODUCT_ID INT PRIMARY KEY
                    ,PRODUCT_NAME VARCHAR(255) NOT NULL
                    ,CATEGORY_ID INT NOT NULL,
                    CONSTRAINT PRODUCT_FK1 FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY(CATEGORY_ID)
                    ,PRICE FLOAT NOT NULL
                    ,QUANTITY INT
                    ,PRODUCT_DESC VARCHAR(200)
                    )'; 
DBMS_OUTPUT.PUT_LINE('TABLE PRODUCT CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;

-------------------------------------------------------------------------------
--DDL FOR CART_ITEM
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='CART_ITEM';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE CART_ITEM(
                    CART_ITEM_ID INT PRIMARY KEY
                    ,CART_ID INT, CONSTRAINT CARTITEM_FK1 FOREIGN KEY (CART_ID) REFERENCES CART(CART_ID)
                    ,PRODUCT_ID INT,  CONSTRAINT CARTITEM_FK2 FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
                    ,QUANTITY INT
                    )'; 
DBMS_OUTPUT.PUT_LINE('TABLE CART_ITEM CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;


-------------------------------------------------------------------------------
--DDL FOR ORDER_ITEM
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='ORDER_ITEM';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE ORDER_ITEM(
                    ORDER_ITEM_ID INT PRIMARY KEY
                    ,ORDER_ID INT, CONSTRAINT ORDER_ITEM_FK1 FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID)
                    ,PRODUCT_ID INT, CONSTRAINT ORDER_ITEM_FK2 FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
                    ,QUANTITY INT
                    )';
DBMS_OUTPUT.PUT_LINE('TABLE ORDER_ITEM CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;


-------------------------------------------------------------------------------
--DDL FOR PRODUCT_SUPPLIER
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='PRODUCT_SUPPLIER';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE PRODUCT_SUPPLIER(
                    PRODUCT_ID INT,
                    CONSTRAINT PRODUCT_SUPPLIER_FK1 FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
                    ,SUPPLIER_ID INT,
                    CONSTRAINT PRODUCT_SUPPLIER_FK2 FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIER(SUPPLIER_ID)
                    ,COST_TO_SUPPLIER FLOAT
                    )';  
DBMS_OUTPUT.PUT_LINE('TABLE PRODUCT_SUPPLIER CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;


-------------------------------------------------------------------------------
--DDL FOR PRODUCT_DISCOUNT
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='PRODUCT_DISCOUNT';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE PRODUCT_DISCOUNT(
                    PRODUCT_ID INT,
                    CONSTRAINT PRODUCT_DISCOUNT_FK1 FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
                    ,DISCOUNT_ID INT,
                    CONSTRAINT PRODUCT_DISCOUNT_FK2 FOREIGN KEY (DISCOUNT_ID) REFERENCES DISCOUNT(DISCOUNT_ID)
                    )';
DBMS_OUTPUT.PUT_LINE('TABLE PRODUCT_DISCOUNT CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;


-------------------------------------------------------------------------------
--DDL FOR FEEDBACKS
-------------------------------------------------------------------------------
SELECT COUNT(*) INTO V_COUNT FROM DBA_TABLES WHERE OWNER='ADMIN' AND TABLE_NAME='FEEDBACKS';
IF V_COUNT=0 THEN 
EXECUTE IMMEDIATE 'CREATE TABLE FEEDBACKS(
                    PRODUCT_ID INT,
                    CONSTRAINT FEEBACK_FK1 FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
                    ,FEEDBACK_ID INT PRIMARY KEY
                    ,FEEDBACK_ VARCHAR(200)
                    ,RATING INT
                    )';
DBMS_OUTPUT.PUT_LINE('TABLE FEEDBACKS CREATED');
ELSE 
DBMS_OUTPUT.PUT_LINE('TABLE ALREADY EXISTS');
END IF;

END;
--------------------------------------------------------------------------------------------------------------------------------------------------------------
/
create or replace PROCEDURE DELETE_CART_ORDERS IS
M_LOOP_COUNT  INT;
BEGIN
    SELECT COUNT(*) INTO M_LOOP_COUNT FROM CART_ITEM;
    FOR I IN 1..M_LOOP_COUNT+1
        LOOP
            DELETE FROM CART_ITEM WHERE ROWNUM = 1;
        END LOOP;
        
    SELECT COUNT(*) INTO M_LOOP_COUNT FROM ORDER_ITEM;
    FOR I IN 1..M_LOOP_COUNT+1
        LOOP
            DELETE FROM ORDER_ITEM WHERE ROWNUM = 1;
        END LOOP;
        
    SELECT COUNT(*) INTO M_LOOP_COUNT FROM PAYMENT_INFO;
    FOR I IN 1..M_LOOP_COUNT+1
        LOOP
            DELETE FROM PAYMENT_INFO WHERE ROWNUM = 1;
        END LOOP; 

    SELECT COUNT(*) INTO M_LOOP_COUNT FROM CART;
    FOR I IN 1..M_LOOP_COUNT+1
        LOOP
            DELETE FROM CART WHERE ROWNUM = 1;
        END LOOP;

    SELECT COUNT(*) INTO M_LOOP_COUNT FROM ORDERS;
    FOR I IN 1..M_LOOP_COUNT+1
        LOOP
            DELETE FROM ORDERS WHERE ROWNUM = 1;
        END LOOP;      
    
    DBMS_OUTPUT.PUT_LINE('CART AND ORDERS DATA CLEARED');
END;
--------------------------------------------------------------------------------------------------------------------------------------------------------------
/
create or replace PROCEDURE DROP_ALL_TABLES IS
BEGIN
    FOR I IN (SELECT * FROM DBA_TABLES WHERE OWNER='ADMIN') LOOP
        EXECUTE IMMEDIATE ('DROP TABLE '||I.TABLE_NAME||' CASCADE CONSTRAINTS');
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('ANY TABLES IF EXISTED DELETED');
END;

----------------------------------------------------------------------------------------
/
create or replace PROCEDURE INSERT_ALL_TABLES AS 
BEGIN
-------------------------------------------------------------------------------
--DML INSERT FOR USER_TABLE
-------------------------------------------------------------------------------
INSERT INTO USER_TABLE(USER_ID,FIRST_NAME,LAST_NAME,PHONE_NUMBER,LOYALTY_DISC)
SELECT 1,'AASHAY' ,'PAWAR' ,1234567890,24 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM USER_TABLE WHERE USER_ID = 1);

INSERT INTO USER_TABLE(USER_ID,FIRST_NAME,LAST_NAME,PHONE_NUMBER,LOYALTY_DISC)
SELECT 2,'PAWAN' ,'KUMAR' ,1234567891,27 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM USER_TABLE WHERE USER_ID = 2);

INSERT INTO USER_TABLE(USER_ID,FIRST_NAME,LAST_NAME,PHONE_NUMBER,LOYALTY_DISC)
SELECT 3,'KEERTHANAA' ,'KANNAN' ,1234567881,10 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM USER_TABLE WHERE USER_ID = 3);

INSERT INTO USER_TABLE(USER_ID,FIRST_NAME,LAST_NAME,PHONE_NUMBER,LOYALTY_DISC)
SELECT 4,'NENCY' ,'PANCHANI' ,1234567880,20 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM USER_TABLE WHERE USER_ID = 4);

INSERT INTO USER_TABLE(USER_ID,FIRST_NAME,LAST_NAME,PHONE_NUMBER,LOYALTY_DISC)
SELECT 5,'CHAITANYA' ,'GOKHALE' ,4536212345,17 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM USER_TABLE WHERE USER_ID = 5);

INSERT INTO USER_TABLE(USER_ID,FIRST_NAME,LAST_NAME,PHONE_NUMBER,LOYALTY_DISC)
SELECT 6,'RUPESH' ,'PATHAK' ,1234523124,23 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM USER_TABLE WHERE USER_ID = 6);

INSERT INTO USER_TABLE(USER_ID,FIRST_NAME,LAST_NAME,PHONE_NUMBER,LOYALTY_DISC)
SELECT 7,'ABHINAV' ,'KUMAR' ,5467234987,35 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM USER_TABLE WHERE USER_ID = 7);

INSERT INTO USER_TABLE(USER_ID,FIRST_NAME,LAST_NAME,PHONE_NUMBER,LOYALTY_DISC)
SELECT 8,'SHIBANI' ,' ',1254657687,7 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM USER_TABLE WHERE USER_ID = 8);

INSERT INTO USER_TABLE(USER_ID,FIRST_NAME,LAST_NAME,PHONE_NUMBER,LOYALTY_DISC)
SELECT 9,'CHARLES' ,'BAKER' ,4534238756,12 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM USER_TABLE WHERE USER_ID = 9);

INSERT INTO USER_TABLE(USER_ID,FIRST_NAME,LAST_NAME,PHONE_NUMBER,LOYALTY_DISC)
SELECT 10,'MICHELLE' ,'WU' ,3642984657,50 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM USER_TABLE WHERE USER_ID = 10);


-------------------------------------------------------------------------------
--DML INSERT FOR ADDRESS
-------------------------------------------------------------------------------
INSERT INTO ADDRESS(ADDRESS_ID,ADDRESS,STREET,CITY,STATE,PIN,COUNTRY,USER_ID)
SELECT 101,'LONGWOOD APT' ,'TREMONT' ,'BOSTON' ,'MASSACHUSETTS' ,2120,'UNITED STATES' ,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ADDRESS WHERE ADDRESS_ID = 101);

INSERT INTO ADDRESS(ADDRESS_ID,ADDRESS,STREET,CITY,STATE,PIN,COUNTRY,USER_ID)
SELECT 102,'JVUE APT' ,'ST ALPHONOUS' ,'BOSTON' ,'MASSACHUSETTS' ,1324,'UNITED STATES' ,2 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ADDRESS WHERE ADDRESS_ID = 102);

INSERT INTO ADDRESS(ADDRESS_ID,ADDRESS,STREET,CITY,STATE,PIN,COUNTRY,USER_ID)
SELECT 103,'MADISSON PART CT' ,'SHAWMUT' ,'BOSTON' ,'MASSACHUSETTS' ,2115,'UNITED STATES' ,3 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ADDRESS WHERE ADDRESS_ID = 103);

INSERT INTO ADDRESS(ADDRESS_ID,ADDRESS,STREET,CITY,STATE,PIN,COUNTRY,USER_ID)
SELECT 104,'BROOKLINE' ,'KENMORE' ,'BOSTON' ,'MASSACHUSETTS' ,2112,'UNITED STATES' ,4 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ADDRESS WHERE ADDRESS_ID = 104);

INSERT INTO ADDRESS(ADDRESS_ID,ADDRESS,STREET,CITY,STATE,PIN,COUNTRY,USER_ID)
SELECT 105,'4169','CRESTVIEW TERRACE' ,'CENTER POINT' ,'TEXAS' ,78010,'UNITED STATES' ,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ADDRESS WHERE ADDRESS_ID = 105);

INSERT INTO ADDRESS(ADDRESS_ID,ADDRESS,STREET,CITY,STATE,PIN,COUNTRY,USER_ID)
SELECT 106,'873 ANDELL ROAD' ,'CARDINAL LANE' ,'NASHVILLE' ,'TENNESSEE' ,37201,'UNITED STATES' ,3 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ADDRESS WHERE ADDRESS_ID = 106);

INSERT INTO ADDRESS(ADDRESS_ID,ADDRESS,STREET,CITY,STATE,PIN,COUNTRY,USER_ID)
SELECT 107,'326 SUGAR COURT' ,'CAMP ROAD' ,'KENT' ,'ILLINOIS' ,61044,'UNITED STATES' ,5 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ADDRESS WHERE ADDRESS_ID = 107);

INSERT INTO ADDRESS(ADDRESS_ID,ADDRESS,STREET,CITY,STATE,PIN,COUNTRY,USER_ID)
SELECT 108,'2838 BINGAMON' ,'BRANCH ROAD' ,'WARWICK' ,'NEW YORK' ,10990,'UNITED STATES' ,6 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ADDRESS WHERE ADDRESS_ID = 108);

INSERT INTO ADDRESS(ADDRESS_ID,ADDRESS,STREET,CITY,STATE,PIN,COUNTRY,USER_ID)
SELECT 109,'UNIVERSITY ROAD' ,'LONG ISLAND' ,'STONY BROOK' ,'NEW YORK' ,10345,'UNITED STATES' ,7 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ADDRESS WHERE ADDRESS_ID = 109);

INSERT INTO ADDRESS(ADDRESS_ID,ADDRESS,STREET,CITY,STATE,PIN,COUNTRY,USER_ID)
SELECT 110,'9500 GILMAN DR' ,'LA JOLLA' ,'SAN DIEGO' ,'CALIFORNIA' ,92093,'UNITED STATES' ,8 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ADDRESS WHERE ADDRESS_ID = 110);

INSERT INTO ADDRESS(ADDRESS_ID,ADDRESS,STREET,CITY,STATE,PIN,COUNTRY,USER_ID)
SELECT 111,'4596 JARVISVILLE ROAD','CARDINAL LANE' ,'BOHEMIA' ,'NEW YORK' ,11716,'UNITED STATES' ,9 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ADDRESS WHERE ADDRESS_ID = 111);

INSERT INTO ADDRESS(ADDRESS_ID,ADDRESS,STREET,CITY,STATE,PIN,COUNTRY,USER_ID)
SELECT 112,'4550 FELOSA DRIVE' ,'SANTA DR' ,'SANTA ANNA' ,'TEXAS' ,76878,'UNITED STATES' ,10 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ADDRESS WHERE ADDRESS_ID = 112);

INSERT INTO ADDRESS(ADDRESS_ID,ADDRESS,STREET,CITY,STATE,PIN,COUNTRY,USER_ID)
SELECT 113,'714 PRESTON STREET' ,'FERGUSON' ,'PHOENIX' ,'ARIZONA' ,4240,'UNITED STATES' ,6 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ADDRESS WHERE ADDRESS_ID = 113);

INSERT INTO ADDRESS(ADDRESS_ID,ADDRESS,STREET,CITY,STATE,PIN,COUNTRY,USER_ID)
SELECT 114,'4387 ROOSEVELT STREET','LOS LANE' ,'OAKLAND' ,'CALIFORNIA' ,94612,'UNITED STATES' ,7 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ADDRESS WHERE ADDRESS_ID = 114);

-------------------------------------------------------------------------------
--DML INSERT FOR CART
-------------------------------------------------------------------------------
INSERT INTO CART(CART_ID,USER_ID,LOYALTY_DISC)
SELECT 1,1,100 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CART WHERE CART_ID = 1);

INSERT INTO CART(CART_ID,USER_ID,LOYALTY_DISC)
SELECT 2,3,56 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CART WHERE CART_ID = 2);

INSERT INTO CART(CART_ID,USER_ID,LOYALTY_DISC)
SELECT 3,4,40 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CART WHERE CART_ID = 3);

INSERT INTO CART(CART_ID,USER_ID,LOYALTY_DISC)
SELECT 4,2,0 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CART WHERE CART_ID = 4);


-------------------------------------------------------------------------------
--DML INSERT FOR ORDERS
-------------------------------------------------------------------------------

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 1,'DELIVERED' ,1,TO_DATE('03/01/22','DD/MM/YY'),101 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=1);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 2,'DELIVERED' ,1,TO_DATE('09/01/22','DD/MM/YY'),105 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=2);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 3,'SHIPPED' ,2,TO_DATE('21/11/22','DD/MM/YY'),102 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=3);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 4,'DELIVERED' ,3,TO_DATE('20/11/22','DD/MM/YY'),106 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=4);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 5,'DELIVERED ',4,TO_DATE('19/11/22','DD/MM/YY'),104 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=5);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 6,'DELIVERED',5,TO_DATE('11/09/21','DD/MM/YY'), 107 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=6);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 7,'SHIPPED',6,TO_DATE('11/09/22','DD/MM/YY'), 108 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=7);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 8,'DELIVERED',7,TO_DATE('03/11/20','DD/MM/YY'), 114 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=8);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 9,'DELIVERED',8,TO_DATE('01/01/21','DD/MM/YY'), 110 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=9);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 10,'SHIPPED',9,TO_DATE('17/08/22','DD/MM/YY'), 111 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=10);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 11,'DELIVERED',10,TO_DATE('22/05/20','DD/MM/YY'), 112 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=11);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 12,'DELIVERED',4,TO_DATE('12/06/21','DD/MM/YY'), 104 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=12);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 13,'SHIPPED',6,TO_DATE('10/12/22','DD/MM/YY'), 113 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=13);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 14,'DELIVERED',8,TO_DATE('06/05/20','DD/MM/YY'), 110 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=14);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 15,'DELIVERED',10,TO_DATE('13/03/21','DD/MM/YY'), 112 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=15);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 16,'DELIVERED',2,TO_DATE('19/02/21','DD/MM/YY'), 102 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=16);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 17,'DELIVERED',3,TO_DATE('14/07/21','DD/MM/YY'), 103 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=17);

INSERT INTO ORDERS(ORDER_ID,ORDER_STATUS,USER_ID,ORDER_DATE, ADDRESS_ID)
SELECT 18,'SHIPPED',2,TO_DATE('27/08/20','DD/MM/YY'), 102 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDERS WHERE ORDER_ID=18);


-------------------------------------------------------------------------------
--DML INSERT FOR LOYALTY_DISCOUNT
-------------------------------------------------------------------------------
INSERT INTO LOYALTY_DISCOUNT(DISCOUNT_ID,USER_ID,DISCOUNT_PCT)
SELECT 1,1,10 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM LOYALTY_DISCOUNT WHERE DISCOUNT_ID = 1);

INSERT INTO LOYALTY_DISCOUNT(DISCOUNT_ID,USER_ID,DISCOUNT_PCT)
SELECT 2,2,20 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM LOYALTY_DISCOUNT WHERE DISCOUNT_ID = 2);

INSERT INTO LOYALTY_DISCOUNT(DISCOUNT_ID,USER_ID,DISCOUNT_PCT)
SELECT 3,3,20 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM LOYALTY_DISCOUNT WHERE DISCOUNT_ID = 3);

-------------------------------------------------------------------------------
--DML INSERT FOR PAYMENT_INFO
-------------------------------------------------------------------------------
INSERT INTO PAYMENT_INFO(PAYMENT_ID,ORDER_ID,PAYMENT_TYPE)
SELECT 1,1,'CREDIT CARD' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PAYMENT_INFO WHERE PAYMENT_ID = 1);

INSERT INTO PAYMENT_INFO(PAYMENT_ID,ORDER_ID,PAYMENT_TYPE)
SELECT 2,2,'DEBIT CARD' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PAYMENT_INFO WHERE PAYMENT_ID = 2);

INSERT INTO PAYMENT_INFO(PAYMENT_ID,ORDER_ID,PAYMENT_TYPE)
SELECT 3,3,'DEBIT CARD' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PAYMENT_INFO WHERE PAYMENT_ID = 3);

INSERT INTO PAYMENT_INFO(PAYMENT_ID,ORDER_ID,PAYMENT_TYPE)
SELECT 4,4,'GIFT CARD' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PAYMENT_INFO WHERE PAYMENT_ID = 4);

INSERT INTO PAYMENT_INFO(PAYMENT_ID,ORDER_ID,PAYMENT_TYPE)
SELECT 5,5,'CREDIT CARD' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PAYMENT_INFO WHERE PAYMENT_ID = 5);

-------------------------------------------------------------------------------
--DML INSERT FOR SUPPLIER
-------------------------------------------------------------------------------
INSERT INTO SUPPLIER(SUPPLIER_ID,SUPPLIER_NAME)
SELECT 1,'AKZ LIMITED' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM SUPPLIER WHERE SUPPLIER_ID = 1);

INSERT INTO SUPPLIER(SUPPLIER_ID,SUPPLIER_NAME)
SELECT 2,'CROSS KITCHENS' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM SUPPLIER WHERE SUPPLIER_ID = 2);

INSERT INTO SUPPLIER(SUPPLIER_ID,SUPPLIER_NAME)
SELECT 3,'SARA JAPAN' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM SUPPLIER WHERE SUPPLIER_ID = 3);

-------------------------------------------------------------------------------
--DML INSERT FOR DISCOUNT
-------------------------------------------------------------------------------
INSERT INTO DISCOUNT(DISCOUNT_TYPE,DISCOUNT_ID,DISCOUNT_PCT)
SELECT 'STORE OFFER',1,10 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM DISCOUNT WHERE DISCOUNT_ID = 1);

INSERT INTO DISCOUNT(DISCOUNT_TYPE,DISCOUNT_ID,DISCOUNT_PCT)
SELECT 'SEASON OFFER',2,15 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM DISCOUNT WHERE DISCOUNT_ID = 2);

INSERT INTO DISCOUNT(DISCOUNT_TYPE,DISCOUNT_ID,DISCOUNT_PCT)
SELECT 'NO DISCOUNT',3,0 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM DISCOUNT WHERE DISCOUNT_ID = 3);

-------------------------------------------------------------------------------
--DML INSERT FOR CATEGORY
-------------------------------------------------------------------------------
INSERT INTO CATEGORY(CATEGORY_ID,CATEGORY_NAME)
SELECT 1,'CLEANING' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CATEGORY WHERE CATEGORY_ID = 1);

INSERT INTO CATEGORY(CATEGORY_ID,CATEGORY_NAME)
SELECT 2,'EXERCISE' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CATEGORY WHERE CATEGORY_ID = 2);

INSERT INTO CATEGORY(CATEGORY_ID,CATEGORY_NAME)
SELECT 3,'KITCHEN' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CATEGORY WHERE CATEGORY_ID = 3);

INSERT INTO CATEGORY(CATEGORY_ID,CATEGORY_NAME)
SELECT 4,'FOOD' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CATEGORY WHERE CATEGORY_ID = 4);

INSERT INTO CATEGORY(CATEGORY_ID,CATEGORY_NAME)
SELECT 5,'DRINKS' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CATEGORY WHERE CATEGORY_ID = 5);

INSERT INTO CATEGORY(CATEGORY_ID,CATEGORY_NAME)
SELECT 6,'CLOTHES' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CATEGORY WHERE CATEGORY_ID = 6);

INSERT INTO CATEGORY(CATEGORY_ID,CATEGORY_NAME)
SELECT 7,'BEAUTY' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CATEGORY WHERE CATEGORY_ID = 7);

INSERT INTO CATEGORY(CATEGORY_ID,CATEGORY_NAME)
SELECT 8,'SPORTS' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CATEGORY WHERE CATEGORY_ID = 8);

INSERT INTO CATEGORY(CATEGORY_ID,CATEGORY_NAME)
SELECT 9,'TOYS' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CATEGORY WHERE CATEGORY_ID = 9);

INSERT INTO CATEGORY(CATEGORY_ID,CATEGORY_NAME)
SELECT 10,'DECORATION' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CATEGORY WHERE CATEGORY_ID = 10);

-------------------------------------------------------------------------------
--DML INSERT FOR PRODUCT
-------------------------------------------------------------------------------
INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 1,'TIDE',1,29.99,10,'TIDE WASHING LIQUID 1 GALLON' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 1);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 2,'YOGA MAT',2,14.89,20,'44 INCH X 90, INCH ALL BLACK SUPER SOFT YOGA MAT' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 2);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 3,'CUTTING BOARD',3,11,21,'WOODEN SUPER STRONG CUTTING BOARD' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 3);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 4,'CERA PLATES',3,11,2,'WHITE CERAMIC PLATES, EASY WASH' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 4);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 5,'LAND-O-LAKES BUTTER' ,4,7.99,10,'UNSALTED BUTTER 5 OZ'  FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 5);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 6,'TETLEY GREEN TEA' ,5,3.99,20,'PACK OF 48 TEA BAGS, GREEN TEA GOOD FOR HEALTH'  FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 6);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 7,'COUNTRYSIDE BROWN EGGS' ,4,8.99,20,'1 DOZEN COUNTRYSIDE EGGS' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 7);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 8,'AMBIENT LIGHT BULB' ,10,10.99,16,'PACK OF 2 AMBIENT WARM BULB'  FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 8);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 9,'MM' ,4,7.99,13,'MM CHOCOLATE CANDIES, 60OZ'  FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 9);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 10,'CKS HOODIE' ,6,35.99,4,'CALVIN KLEIN WOMENS HOODIE, SIZE S' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 10);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 11,'LEVIS BOMBER JACKET' ,6,25.99,3,'LEVIS WINTER JACKET FOR MEN, SIZE M' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 11);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 12,'DOLCE GABBANA LIGHT BLUE' ,7,78.99,23,'DOLCE GABBANA EDT FOR MEN'  FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 12);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 13,'CETAPHIL SKIN CLEANSER' ,7,15.99,56,'SKIN CLEANSER FOR ALL SKIN TYPES' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 13);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 14,'MACYS THE GLAM CASE' ,7,99.99,14,'MAKEUP KIT FOR WOMEN' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 14);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 15,'BASKET BALL' ,8,17.99,32,'BASKET BALL FLATTENED'  FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 15);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 16,'GAME OF BUSINESS' ,9,10.99,65,'BOARD GAMES' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 16);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 17,'BUDWISER' ,4,9.99,78,'DRINKS AND BEER' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 17);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 18,'SPOONS' ,3,4.99,13,'SET OF 5 SPOONS' FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 18);

INSERT INTO PRODUCT(PRODUCT_ID,PRODUCT_NAME,CATEGORY_ID,PRICE,QUANTITY,PRODUCT_DESC)
SELECT 19,'PRESTIGE PAN' ,3,11.99,5,'NON-STICK NON-INDUCTION PAN'  FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT WHERE PRODUCT_ID = 19);

-------------------------------------------------------------------------------
--DML INSERT FOR CART_ITEM
-------------------------------------------------------------------------------
INSERT INTO CART_ITEM(CART_ITEM_ID,CART_ID,PRODUCT_ID,QUANTITY)
SELECT 1,1,1,2 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CART_ITEM WHERE CART_ITEM_ID = 1);

INSERT INTO CART_ITEM(CART_ITEM_ID,CART_ID,PRODUCT_ID,QUANTITY)
SELECT 2,1,2,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM CART_ITEM WHERE CART_ITEM_ID = 2);


-------------------------------------------------------------------------------
--DML INSERT FOR ORDER_ITEM
-------------------------------------------------------------------------------
INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 1,1,1,2 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 1);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 2,1,2,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 2);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 3,2,3,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 3);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 4,3,4,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 4);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 5,4,1,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 5);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 6,5,2,3 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 6);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 7,6,19,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 7);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 8,6,18,2 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 8);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 9,7,17,3 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 9);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 10,8,16,4 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 10);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 11,8,15,2 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 11);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 12,8,14,3 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 12);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 13,9,13,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 13);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 14,9,12,3 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 14);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 15,10,11,2 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 15);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 16,11,10,8 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 16);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 17,12,9,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 17);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 18,13,8,2 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 18);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 19,14,7,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 19);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 20,15,6,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 20);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 21,15,5,2 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 21);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 22,16,5,3 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 22);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 23,17,5,4 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 23);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 24,18,4,2 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 24);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 25,1,3,3 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 25);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 26,2,2,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 26);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 27,3,2,3 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 27);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 28,4,1,2 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 28);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 29,5,19,8 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 29);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 30,6,18,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 30);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 31,7,17,2 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 31);

INSERT INTO ORDER_ITEM(ORDER_ITEM_ID,ORDER_ID,PRODUCT_ID,QUANTITY)
SELECT 32,8,17,1 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM ORDER_ITEM WHERE ORDER_ITEM_ID = 32);

-------------------------------------------------------------------------------
--DML INSERT FOR PRODUCT_SUPPLIER
-------------------------------------------------------------------------------
INSERT INTO PRODUCT_SUPPLIER(PRODUCT_ID,SUPPLIER_ID,COST_TO_SUPPLIER)
SELECT 1,1,10 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT_SUPPLIER WHERE PRODUCT_ID = 1);

INSERT INTO PRODUCT_SUPPLIER(PRODUCT_ID,SUPPLIER_ID,COST_TO_SUPPLIER)
SELECT 2,1,4 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT_SUPPLIER WHERE PRODUCT_ID = 2);

INSERT INTO PRODUCT_SUPPLIER(PRODUCT_ID,SUPPLIER_ID,COST_TO_SUPPLIER)
SELECT 3,2,3 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT_SUPPLIER WHERE PRODUCT_ID = 3);

INSERT INTO PRODUCT_SUPPLIER(PRODUCT_ID,SUPPLIER_ID,COST_TO_SUPPLIER)
SELECT 4,3,2.5 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM PRODUCT_SUPPLIER WHERE PRODUCT_ID = 4);

-------------------------------------------------------------------------------
--DML INSERT FOR PRODUCT_DISCOUNT
-------------------------------------------------------------------------------
INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 1,1 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 2,1 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 3,2 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 4,1 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 5,1 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 6,3 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 7,2 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 8,1 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 9,3 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 10,3 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 11,3 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 12,1 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 13,3 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 14,2 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 15,3 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 16,3 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 17,1 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 18,3 FROM DUAL;

INSERT INTO PRODUCT_DISCOUNT(PRODUCT_ID,DISCOUNT_ID)
SELECT 19,2 FROM DUAL;

-------------------------------------------------------------------------------
--DML INSERT FOR FEEDBACK
-------------------------------------------------------------------------------
INSERT INTO FEEDBACKS(PRODUCT_ID,FEEDBACK_ID,FEEDBACK_,RATING)
SELECT 1,1,'BAD QUALITY',2 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM FEEDBACKS WHERE FEEDBACK_ID = 1);

INSERT INTO FEEDBACKS(PRODUCT_ID,FEEDBACK_ID,FEEDBACK_,RATING)
SELECT 1,2,'WASHES CLEAN',4 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM FEEDBACKS WHERE FEEDBACK_ID = 2);

INSERT INTO FEEDBACKS(PRODUCT_ID,FEEDBACK_ID,FEEDBACK_,RATING)
SELECT 2,3,'HIGH COMFORT',5 FROM DUAL
WHERE NOT EXISTS(SELECT * FROM FEEDBACKS WHERE FEEDBACK_ID = 3);

DBMS_OUTPUT.PUT_LINE('ALL DATA INSERTED, DUPLICTATES IGNORED');

END INSERT_ALL_TABLES;


